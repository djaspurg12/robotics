/* TODO
 * ====
 * Implement Rule: Move forward, adjusting for compass.
 * Implement Rule: If unaligned with wall in the short-term, turn to realign.
 * Implement Rule: If unaligned with wall in the long-term, turn to realign.
 * Implement Rule: If object up ahead < 20cm away, turn until back sensor is parallel with it.
 * Implement Rule: If front sensor suddenly loses object, continue until back loses object, then turn 90 degrees.
 * Implement Rule: If all sensors cannot detect any objects, continue for 5 seconds, then stop.
 */

///////////////////////////////////////////////////////////////////////////////
// Composite Events
///////////////////////////////////////////////////////////////////////////////

bool eventFrontBackObjectUnalignedSudden (int now, int frontHistory[], int backHistory[]) {
  if (abs(frontHistory[now] - backHistory[now]) > 2) {
    return true;
  } else {
    return false;
  }
}

bool eventFrontBackObjectUnalignedGradual (int now, int frontHistory[], int backHistory[]) {
  return false;
}

///////////////////////////////////////////////////////////////////////////////
// Core Events
///////////////////////////////////////////////////////////////////////////////

bool isUltraObjectFound (int now, int history[], int foreground, int background) {
  if (history[now] < background) {
    return true;
  } else {
    return false;
  }
}

bool isUltraObjectLost (int now, int ultraHistory[], int foreground, int background) {
  if (ultraHistory[now] > background) {
    return true;
  } else {
    return false;
  }
}

bool isUltraObjectGainingSudden (int now, int ultraHistory[], int foreground, int background) {
  return false;
}

bool isUltraObjectGradualGaining (int now, int ultraHistory[], int foreground, int background) {
  return false;
}

bool isUltraObjectSuddenLosing (int now, int ultraHistory[], int foreground, int background) {
  return false;
}

bool isUltraObjectGradualLosing (int now, int ultraHistory[], int foreground, int background) {
  return false;
}


// Entry struct for holding everything to be writen to disk
struct entry {
  long totalRightRotations;
  long totalLeftRotations;
  long currentTick;
  int heading;
};

// The actual function that handles the writing of data to disk
int writeEntry(byte handle, entry e) {
  string lRotationStr;
  string rRotationStr;
  string frontUltraSonic;
  string backUltraSonic;
  string forwardUltraSonic;
  string tickStr;
  string headingStr;
  string msg;
  int result;
  int actuallyWritten;

  rRotationStr = NumToStr(e.totalRightRotations);
  lRotationStr = NumToStr(e.totalLeftRotations);
  tickStr = NumToStr(e.currentTick);
  headingStr = NumToStr(e.heading);

  msg = tickStr + "," + headingStr + "," + frontUltraSonic + "," + backUltraSonic + "," + forwardUltraSonic + "," + lRotationStr + ", " + rRotationStr;
  result = WriteLnString(handle, msg, actuallyWritten);
  return result;
}

// Averages n readings together into a single reading
int avgReading(byte port, int n) {
  int i;
  int reading = 0;
  int oldReading = 0;
  int newReading = 0;

  for(i = 0; i < n; i++) {
    oldReading = newReading;
    reading = SensorRaw(port);
    newReading = reading + oldReading;
  }
  return(newReading/n);
}

// Averages n ultra sensor readings together into a single reading
int avgUltraReading(byte port, int n) {
  int i = 0;
  int reading = 0;
  int oldReading = 0;
  int newReading = 0;
  
  for(i = 0; i < n; i++) {
    oldReading = newReading;
    reading = SensorUS(port);
    newReading = reading + oldReading;
  }
  return(newReading/n);
}

int smoothUltraReading(byte port, int n) {
  int i = 0;
  int reading = 0;
  int sketchyReading = 0;
  int newReading = 0;
  int oldReading = 0;

  while (i < n) {
    sketchyReading = SensorUS(port);
    if (sketchyReading > 100) {
      oldReading = newReading;
      reading = sketchyReading / 10;
      newReading = reading + oldReading;
      i++;
    } else {
      oldReading = newReading;
      reading = sketchyReading;
      newReading = reading + oldReading;
      i++;
    }
  }

  return (newReading/n);
}

task main() {
  // State Variables
  long rightRotation;
  long leftRotation;
  long tick;

  // Reading Variables
  int frontUltraReading;
  int backUltraReading;
  int forwardUltraReading;
  int compassReading;

  // variables for file handling
  //byte handle;
  //unsigned int result = 0;
  //int actuallyWritten;

  // Debug info variables
  string forwardStr;
  string frontStr;
  string backStr;
  string compassStr;

  string forwardMsg;
  string frontMsg;
  string backMsg;
  string compassMsg;

  // Configure sensors
  SetSensorLowspeed(IN_1); //Forward UltraSonic
  SetSensorMode(IN_1, IN_MODE_RAW);

  SetSensorLowspeed(IN_2); //font UltraSonic
  SetSensorMode(IN_2, IN_MODE_RAW);

  SetSensorLowspeed(IN_3); //back UltraSonic 
  SetSensorMode(IN_3, IN_MODE_RAW);
  
  SetSensorLowspeed(IN_4); //Compass


  ResetTachoCount(OUT_AB);
  ResetRotationCount(OUT_AB);

  // Initial wait for all sensors to come online
  Wait(1000);

  //result = CreateFile("wall.csv", 8192, handle);
  //result = WriteLnString(handle, "Tick,Compass,Front UltraSonic,Back UltraSonic, Forward Ultrasonic,Left Rotations,Right Rotations", actuallyWritten);
  int forwardHistory[];
  int frontHistory[];
  int backHistory[];
  int compassHistory[];

  while (true) {
    int i;
    int size = 100;
    ArrayInit(forwardHistory, 0, size);
    ArrayInit(frontHistory, 0, size);
    ArrayInit(backHistory, 0, size);
    ArrayInit(compassHistory, 0, size);

    //////////////////////////////////////////////
    // Debug Info for this iteration
    //////////////////////////////////////////////

    for (i = 0; i < size; i++) {
      forwardUltraReading = 0;
      forwardUltraReading = smoothUltraReading(IN_1, 1);
      forwardHistory[i] = forwardUltraReading;
      forwardStr = NumToStr(forwardUltraReading);
      forwardMsg = "Forward: " + forwardStr;
      TextOut(0, LCD_LINE1, forwardMsg);
     
      frontUltraReading = 0;
      frontUltraReading = smoothUltraReading(IN_2, 1);
      frontHistory[i] = frontUltraReading;
      frontStr = NumToStr(frontUltraReading);
      frontMsg = "Front: " + frontStr;
      TextOut(0, LCD_LINE2, frontMsg);

      backUltraReading = 0;
      backUltraReading = smoothUltraReading(IN_3, 1);
      backHistory[i] = backUltraReading;
      backStr = NumToStr(backUltraReading);
      backMsg = "Back: " + backStr;
      TextOut(0, LCD_LINE3, backMsg);

      compassReading = 0;
      compassReading = smoothUltraReading(IN_4, 1);
      compassHistory[i] = compassReading;
      compassStr = NumToStr(compassReading);
      compassMsg = "Compass: " + compassStr;
      TextOut(0, LCD_LINE5, compassMsg);

      tick = CurrentTick();
      rightRotation = MotorRotationCount(OUT_A);
      leftRotation = MotorRotationCount(OUT_B);

      // Create a new entry for writing to disk
      //thisPosition.currentTick = CurrentTick();
      //thisPosition.totalRightRotations = MotorRotationCount(OUT_A);
      //thisPosition.totalLeftRotations = MotorRotationCount(OUT_B);
      //thisPosition.heading = SensorHTCompass(S3);

      //result = writeEntry(handle, thisPosition);
      ////////////////////////////////////////////
      //estimatedDistance = ((rightRotation + leftRotation) / 4000);

      /*
      if (forwardUltaReading < 50){
      OnFwd(OUT_A, 50);
      OnFwd(OUT_B, 0);
      }
      //OnFwd(OUT_A, 0);
      */ 
      /*
      if (abs(frontUltraReading - backUltraReading) > 1) {
        if (frontUltraReading < backUltraReading) {
          OnFwd(OUT_A, 40);
          OnFwd(OUT_B, 30);
        } else {
          OnFwd(OUT_A, 30);
          OnFwd(OUT_B, 40);
        }
      } else {
        OnFwd(OUT_AB, 50);
      }
      */
    }
    TextOut(0, LCD_LINE6, "Rotate");
  }
}
