
// Entry struct for holding everything to be writen to disk
struct entry {
  long totalRightRotations;
  long totalLeftRotations;
  long currentTick;
  int heading;
};

// The actual function that handles the writing of data to disk
int writeEntry(byte handle, entry e) {
  string lRotationStr;
  string rRotationStr;
  string frontUltraSonic;
  string backUltraSonic;
  string forwardUltraSonic;
  string tickStr;
  string headingStr;
  string msg;
  int result;
  int actuallyWritten;

  rRotationStr = NumToStr(e.totalRightRotations);
  lRotationStr = NumToStr(e.totalLeftRotations);
  tickStr = NumToStr(e.currentTick);
  headingStr = NumToStr(e.heading);

  msg = tickStr + "," + headingStr + "," + frontUltraSonic + "," + backUltraSonic + "," + forwardUltraSonic + "," + lRotationStr + ", " + rRotationStr;
  result = WriteLnString(handle, msg, actuallyWritten);
  return result;
}

// Averages n readings together into a single reading
int avgReading(byte port, int n) {
  int i;
  int reading = 0;
  int oldReading = 0;
  int newReading = 0;

  string debugStr;
  string debugMsg;

  for(i = 0; i < n; i++) {
    oldReading = newReading;
    reading = SensorRaw(port);
    newReading = reading + oldReading;
    debugStr = NumToStr(n);
    debugMsg = "Got reading: " + debugStr;
    TextOut(0, LCD_LINE8, debugMsg);
  }
  return(newReading/n);
}

// Averages n ultra sensor readings together into a single reading
int avgUltraReading(byte port, int n) {
  int i = 0;
  int reading = 0;
  int oldReading = 0;
  int newReading = 0;
  
  for(i = 0; i < n; i++) {
    oldReading = newReading;
    reading = SensorUS(port);
    newReading = reading + oldReading;
  }
  return(newReading/n);
}

int smoothUltraReading(byte port, int n) {
  int i = 0;
  int reading = 0;
  int sketchyReading = 0;
  int newReading = 0;
  int oldReading = 0;
  while (i < n) {
    sketchyReading = SensorUS(port);
    TextOut(0, LCD_LINE7, NumToStr(sketchyReading));
    if (sketchyReading < 50) {
      oldReading = newReading;
      reading = sketchyReading;
      TextOut(0, LCD_LINE8, NumToStr(reading));
      newReading = reading + oldReading;
      i++;
    }
  }

  return (newReading/n);
}

task main() {
  //entry thisPosition;

  // State Variables
  long rightRotation;
  long leftRotation;
  long tick;

  // Reading Variables
  int frontUltraReading;
  int backUltraReading;
  int forwardUltraReading;
  int compassReading;
  //float estimatedDistance = 0;

  // variables for file handling
  //byte handle;
  //unsigned int result = 0;
  //int actuallyWritten;

  // Debug info variables
  string str1;
  string str2;
  string str3;
  string str4;

  string msg1;
  string msg2;
  string msg3;
  string msg4;

  // Configure sensors
  /*
  SetSensorLowspeed(IN_4); //font UltraSonic
  SetSensorMode(IN_4, IN_MODE_RAW);

  SetSensorLowspeed(IN_2); //back UltraSonic 
  SetSensorMode(IN_2, IN_MODE_RAW);
  SetSensorLowspeed(IN_1); //Forward UltraSonic
  SetSensorMode(IN_1, IN_MODE_RAW);
  */
  SetSensorLowspeed(IN_4);


  ResetTachoCount(OUT_AB);
  ResetRotationCount(OUT_AB);

  // Initial wait for all sensors to come online
  Wait(1000);

  //result = CreateFile("wall.csv", 8192, handle);
  //result = WriteLnString(handle, "Tick,Compass,Front UltraSonic,Back UltraSonic, Forward Ultrasonic,Left Rotations,Right Rotations", actuallyWritten);
  int forwardHistory[];
  int frontHistory[];
  int backHistory[];
  int compassHistory[];
  while (true) {
    int i;
    int size = 100;
    ArrayInit(forwardHistory, 0, size);
    ArrayInit(frontHistory, 0, size);
    ArrayInit(backHistory, 0, size);
    ArrayInit(compassHistory, 0, size);
    //////////////////////////////////////////////
    // Debug Info for this iteration
    //////////////////////////////////////////////

    for (i = 0; i < size; i++) {
      SetSensorLowspeed(IN_1); //font UltraSonic
      SetSensorMode(IN_1, IN_MODE_RAW);
      forwardUltraReading = 0;
      forwardUltraReading = smoothUltraReading(IN_1, 1);
      forwardHistory[i] = forwardUltraReading;
      str3 = NumToStr(forwardUltraReading);
      msg3 = "Forward: " + str3;
      TextOut(0, LCD_LINE3, msg3);
      ResetSensor(IN_1);
     
      
      SetSensorLowspeed(IN_2); //Forward UltraSonic
      SetSensorMode(IN_2, IN_MODE_RAW);
      frontUltraReading = 0;
      frontUltraReading = smoothUltraReading(IN_2, 1);
      frontHistory[i] = frontUltraReading;
      str1 = NumToStr(frontUltraReading);
      msg1 = "Front Ultra: " + str1;
      TextOut(0, LCD_LINE1, msg1);
      ResetSensor(IN_2);

      SetSensorLowspeed(IN_3); //back UltraSonic 
      SetSensorMode(IN_3, IN_MODE_RAW);
      backUltraReading = 0;
      backUltraReading = smoothUltraReading(IN_3, 1);
      backHistory[i] = backUltraReading;
      str2 = NumToStr(backUltraReading);
      msg2 = "Back Ultra: " + str2;
      TextOut(0, LCD_LINE2, msg2);
      ResetSensor(IN_3);

      compassReading = 0;
      compassReading = avgUltraReading(IN_4, 5);
      compassHistory[i] = compassReading;
      str4 = NumToStr(compassReading);
      msg4 = "Current: " + str4;
      TextOut(0, LCD_LINE4, msg4);
      ResetSensor(IN_4);

      tick = CurrentTick();
      rightRotation = MotorRotationCount(OUT_A);
      leftRotation = MotorRotationCount(OUT_B);

      // Create a new entry for writing to disk
      //thisPosition.currentTick = CurrentTick();
      //thisPosition.totalRightRotations = MotorRotationCount(OUT_A);
      //thisPosition.totalLeftRotations = MotorRotationCount(OUT_B);
      //thisPosition.heading = SensorHTCompass(S3);

      //result = writeEntry(handle, thisPosition);
      /////////////////////////////////////////////
      //estimatedDistance = ((rightRotation + leftRotation) / 4000);
      /*        
      if (forwardUltaReading < 50){
      OnFwd(OUT_A, 50);
      OnFwd(OUT_B, 0);
      }
      //OnFwd(OUT_A, 0);
      */ 
      if (abs(frontUltraReading - backUltraReading) > 1) {
        if (frontUltraReading < backUltraReading) {
          OnFwd(OUT_A, 40);
          OnFwd(OUT_B, 30);
        } else {
          OnFwd(OUT_A, 30);
          OnFwd(OUT_B, 40);
        }
      } else {
        OnFwd(OUT_AB, 50);
      }
    }
  }
}
